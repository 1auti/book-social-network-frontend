{"ast":null,"code":"import { JwtHelperService } from '@auth0/angular-jwt';\nimport * as i0 from \"@angular/core\";\nexport class TokenService {\n  set token(token) {\n    localStorage.setItem('token', token);\n  }\n  get token() {\n    return localStorage.getItem('token');\n  }\n  isTokenValid() {\n    const token = this.token;\n    if (!token) {\n      return false;\n    }\n    // decode the token\n    const jwtHelper = new JwtHelperService();\n    // check expiry date\n    const isTokenExpired = jwtHelper.isTokenExpired(token);\n    if (isTokenExpired) {\n      localStorage.clear();\n      return false;\n    }\n    return true;\n  }\n  isTokenNotValid() {\n    return !this.isTokenValid();\n  }\n  get userRoles() {\n    const token = this.token;\n    if (token) {\n      const jwtHelper = new JwtHelperService();\n      const decodedToken = jwtHelper.decodeToken(token);\n      console.log(decodedToken.authorities);\n      return decodedToken.authorities;\n    }\n    return [];\n  }\n  static #_ = this.ɵfac = function TokenService_Factory(t) {\n    return new (t || TokenService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TokenService,\n    factory: TokenService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["JwtHelperService","TokenService","token","localStorage","setItem","getItem","isTokenValid","jwtHelper","isTokenExpired","clear","isTokenNotValid","userRoles","decodedToken","decodeToken","console","log","authorities","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Lautaro\\Desktop\\Desarrollo-web\\Proyectos\\book-social-network\\src\\app\\service\\token\\token.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {JwtHelperService} from '@auth0/angular-jwt';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TokenService {\r\n\r\n  set token(token: string) {\r\n    localStorage.setItem('token', token);\r\n  }\r\n\r\n  get token() {\r\n    return localStorage.getItem('token') as string;\r\n  }\r\n\r\n  isTokenValid() {\r\n    const token = this.token;\r\n    if (!token) {\r\n      return false;\r\n    }\r\n    // decode the token\r\n    const jwtHelper = new JwtHelperService();\r\n    // check expiry date\r\n    const isTokenExpired = jwtHelper.isTokenExpired(token);\r\n    if (isTokenExpired) {\r\n      localStorage.clear();\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  isTokenNotValid() {\r\n    return !this.isTokenValid();\r\n  }\r\n\r\n  get userRoles(): string[] {\r\n    const token = this.token;\r\n    if (token) {\r\n      const jwtHelper = new JwtHelperService();\r\n      const decodedToken = jwtHelper.decodeToken(token);\r\n      console.log(decodedToken.authorities);\r\n      return decodedToken.authorities;\r\n    }\r\n    return [];\r\n  }\r\n}"],"mappings":"AACA,SAAQA,gBAAgB,QAAO,oBAAoB;;AAKnD,OAAM,MAAOC,YAAY;EAEvB,IAAIC,KAAKA,CAACA,KAAa;IACrBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,KAAK,CAAC;EACtC;EAEA,IAAIA,KAAKA,CAAA;IACP,OAAOC,YAAY,CAACE,OAAO,CAAC,OAAO,CAAW;EAChD;EAEAC,YAAYA,CAAA;IACV,MAAMJ,KAAK,GAAG,IAAI,CAACA,KAAK;IACxB,IAAI,CAACA,KAAK,EAAE;MACV,OAAO,KAAK;;IAEd;IACA,MAAMK,SAAS,GAAG,IAAIP,gBAAgB,EAAE;IACxC;IACA,MAAMQ,cAAc,GAAGD,SAAS,CAACC,cAAc,CAACN,KAAK,CAAC;IACtD,IAAIM,cAAc,EAAE;MAClBL,YAAY,CAACM,KAAK,EAAE;MACpB,OAAO,KAAK;;IAEd,OAAO,IAAI;EACb;EAEAC,eAAeA,CAAA;IACb,OAAO,CAAC,IAAI,CAACJ,YAAY,EAAE;EAC7B;EAEA,IAAIK,SAASA,CAAA;IACX,MAAMT,KAAK,GAAG,IAAI,CAACA,KAAK;IACxB,IAAIA,KAAK,EAAE;MACT,MAAMK,SAAS,GAAG,IAAIP,gBAAgB,EAAE;MACxC,MAAMY,YAAY,GAAGL,SAAS,CAACM,WAAW,CAACX,KAAK,CAAC;MACjDY,OAAO,CAACC,GAAG,CAACH,YAAY,CAACI,WAAW,CAAC;MACrC,OAAOJ,YAAY,CAACI,WAAW;;IAEjC,OAAO,EAAE;EACX;EAAC,QAAAC,CAAA,G;qBAvCUhB,YAAY;EAAA;EAAA,QAAAiB,EAAA,G;WAAZjB,YAAY;IAAAkB,OAAA,EAAZlB,YAAY,CAAAmB,IAAA;IAAAC,UAAA,EAFX;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}