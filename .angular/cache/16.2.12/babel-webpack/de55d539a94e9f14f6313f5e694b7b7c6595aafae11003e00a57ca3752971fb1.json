{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { BaseService } from '../base-service';\nimport { approveReturnBorrowBook } from '../fn/book/approve-return-borrow-book';\nimport { borrowBook } from '../fn/book/borrow-book';\nimport { findAllBooks } from '../fn/book/find-all-books';\nimport { findAllBooksByOwner } from '../fn/book/find-all-books-by-owner';\nimport { findAllBorrowedBooks } from '../fn/book/find-all-borrowed-books';\nimport { findAllReturnedBooks } from '../fn/book/find-all-returned-books';\nimport { findBookById } from '../fn/book/find-book-by-id';\nimport { returnBorrowBook } from '../fn/book/return-borrow-book';\nimport { saveBook } from '../fn/book/save-book';\nimport { updateArchivedStatus } from '../fn/book/update-archived-status';\nimport { updateShareableStatus } from '../fn/book/update-shareable-status';\nimport { uploadBookCoverPicture } from '../fn/book/upload-book-cover-picture';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api-configuration\";\nimport * as i2 from \"@angular/common/http\";\nexport class BookService extends BaseService {\n  constructor(config, http) {\n    super(config, http);\n  }\n  /** Path part for operation `findAllBooks()` */\n  static #_ = this.FindAllBooksPath = '/books';\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `findAllBooks()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findAllBooks$Response(params, context) {\n    return findAllBooks(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `findAllBooks$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findAllBooks(params, context) {\n    return this.findAllBooks$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `saveBook()` */\n  static #_2 = this.SaveBookPath = '/books';\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `saveBook()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  saveBook$Response(params, context) {\n    return saveBook(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `saveBook$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  saveBook(params, context) {\n    return this.saveBook$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `uploadBookCoverPicture()` */\n  static #_3 = this.UploadBookCoverPicturePath = '/books/cover/{book-id}';\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `uploadBookCoverPicture()` instead.\n   *\n   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.\n   */\n  uploadBookCoverPicture$Response(params, context) {\n    return uploadBookCoverPicture(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `uploadBookCoverPicture$Response()` instead.\n   *\n   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.\n   */\n  uploadBookCoverPicture(params, context) {\n    return this.uploadBookCoverPicture$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `borrowBook()` */\n  static #_4 = this.BorrowBookPath = '/books/borrow/{book-id}';\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `borrowBook()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  borrowBook$Response(params, context) {\n    return borrowBook(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `borrowBook$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  borrowBook(params, context) {\n    return this.borrowBook$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `updateShareableStatus()` */\n  static #_5 = this.UpdateShareableStatusPath = '/books/shareable/{book-id}';\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `updateShareableStatus()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  updateShareableStatus$Response(params, context) {\n    return updateShareableStatus(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `updateShareableStatus$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  updateShareableStatus(params, context) {\n    return this.updateShareableStatus$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `returnBorrowBook()` */\n  static #_6 = this.ReturnBorrowBookPath = '/books/borrow/return/{book-id}';\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `returnBorrowBook()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  returnBorrowBook$Response(params, context) {\n    return returnBorrowBook(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `returnBorrowBook$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  returnBorrowBook(params, context) {\n    return this.returnBorrowBook$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `approveReturnBorrowBook()` */\n  static #_7 = this.ApproveReturnBorrowBookPath = '/books/borrow/return/approve/{book-id}';\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `approveReturnBorrowBook()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  approveReturnBorrowBook$Response(params, context) {\n    return approveReturnBorrowBook(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `approveReturnBorrowBook$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  approveReturnBorrowBook(params, context) {\n    return this.approveReturnBorrowBook$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `updateArchivedStatus()` */\n  static #_8 = this.UpdateArchivedStatusPath = '/books/archived/{book-id}';\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `updateArchivedStatus()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  updateArchivedStatus$Response(params, context) {\n    return updateArchivedStatus(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `updateArchivedStatus$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  updateArchivedStatus(params, context) {\n    return this.updateArchivedStatus$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `findBookById()` */\n  static #_9 = this.FindBookByIdPath = '/books/{book-id}';\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `findBookById()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findBookById$Response(params, context) {\n    return findBookById(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `findBookById$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findBookById(params, context) {\n    return this.findBookById$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `findAllReturnedBooks()` */\n  static #_10 = this.FindAllReturnedBooksPath = '/books/returned';\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `findAllReturnedBooks()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findAllReturnedBooks$Response(params, context) {\n    return findAllReturnedBooks(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `findAllReturnedBooks$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findAllReturnedBooks(params, context) {\n    return this.findAllReturnedBooks$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `findAllBooksByOwner()` */\n  static #_11 = this.FindAllBooksByOwnerPath = '/books/owner';\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `findAllBooksByOwner()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findAllBooksByOwner$Response(params, context) {\n    return findAllBooksByOwner(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `findAllBooksByOwner$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findAllBooksByOwner(params, context) {\n    return this.findAllBooksByOwner$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `findAllBorrowedBooks()` */\n  static #_12 = this.FindAllBorrowedBooksPath = '/books/borrowed';\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `findAllBorrowedBooks()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findAllBorrowedBooks$Response(params, context) {\n    return findAllBorrowedBooks(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `findAllBorrowedBooks$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findAllBorrowedBooks(params, context) {\n    return this.findAllBorrowedBooks$Response(params, context).pipe(map(r => r.body));\n  }\n  static #_13 = this.ɵfac = function BookService_Factory(t) {\n    return new (t || BookService)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n  };\n  static #_14 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BookService,\n    factory: BookService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["map","BaseService","approveReturnBorrowBook","borrowBook","findAllBooks","findAllBooksByOwner","findAllBorrowedBooks","findAllReturnedBooks","findBookById","returnBorrowBook","saveBook","updateArchivedStatus","updateShareableStatus","uploadBookCoverPicture","BookService","constructor","config","http","_","FindAllBooksPath","findAllBooks$Response","params","context","rootUrl","pipe","r","body","_2","SaveBookPath","saveBook$Response","_3","UploadBookCoverPicturePath","uploadBookCoverPicture$Response","_4","BorrowBookPath","borrowBook$Response","_5","UpdateShareableStatusPath","updateShareableStatus$Response","_6","ReturnBorrowBookPath","returnBorrowBook$Response","_7","ApproveReturnBorrowBookPath","approveReturnBorrowBook$Response","_8","UpdateArchivedStatusPath","updateArchivedStatus$Response","_9","FindBookByIdPath","findBookById$Response","_10","FindAllReturnedBooksPath","findAllReturnedBooks$Response","_11","FindAllBooksByOwnerPath","findAllBooksByOwner$Response","_12","FindAllBorrowedBooksPath","findAllBorrowedBooks$Response","_13","i0","ɵɵinject","i1","ApiConfiguration","i2","HttpClient","_14","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Lautaro\\Desktop\\Desarrollo-web\\Proyectos\\book-social-network\\src\\app\\service\\service\\book.service.ts"],"sourcesContent":["/* tslint:disable */\r\n/* eslint-disable */\r\nimport { HttpClient, HttpContext } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { BaseService } from '../base-service';\r\nimport { ApiConfiguration } from '../api-configuration';\r\nimport { StrictHttpResponse } from '../strict-http-response';\r\n\r\nimport { approveReturnBorrowBook } from '../fn/book/approve-return-borrow-book';\r\nimport { ApproveReturnBorrowBook$Params } from '../fn/book/approve-return-borrow-book';\r\nimport { BookResponse } from '../model/book-response';\r\nimport { borrowBook } from '../fn/book/borrow-book';\r\nimport { BorrowBook$Params } from '../fn/book/borrow-book';\r\nimport { findAllBooks } from '../fn/book/find-all-books';\r\nimport { FindAllBooks$Params } from '../fn/book/find-all-books';\r\nimport { findAllBooksByOwner } from '../fn/book/find-all-books-by-owner';\r\nimport { FindAllBooksByOwner$Params } from '../fn/book/find-all-books-by-owner';\r\nimport { findAllBorrowedBooks } from '../fn/book/find-all-borrowed-books';\r\nimport { FindAllBorrowedBooks$Params } from '../fn/book/find-all-borrowed-books';\r\nimport { findAllReturnedBooks } from '../fn/book/find-all-returned-books';\r\nimport { FindAllReturnedBooks$Params } from '../fn/book/find-all-returned-books';\r\nimport { findBookById } from '../fn/book/find-book-by-id';\r\nimport { FindBookById$Params } from '../fn/book/find-book-by-id';\r\nimport { PageResponseBookResponse } from '../model/page-response-book-response';\r\nimport { PageResponseBorrowedBookResponse } from '../model/page-response-borrowed-book-response';\r\nimport { returnBorrowBook } from '../fn/book/return-borrow-book';\r\nimport { ReturnBorrowBook$Params } from '../fn/book/return-borrow-book';\r\nimport { saveBook } from '../fn/book/save-book';\r\nimport { SaveBook$Params } from '../fn/book/save-book';\r\nimport { updateArchivedStatus } from '../fn/book/update-archived-status';\r\nimport { UpdateArchivedStatus$Params } from '../fn/book/update-archived-status';\r\nimport { updateShareableStatus } from '../fn/book/update-shareable-status';\r\nimport { UpdateShareableStatus$Params } from '../fn/book/update-shareable-status';\r\nimport { uploadBookCoverPicture } from '../fn/book/upload-book-cover-picture';\r\nimport { UploadBookCoverPicture$Params } from '../fn/book/upload-book-cover-picture';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class BookService extends BaseService {\r\n  constructor(config: ApiConfiguration, http: HttpClient) {\r\n    super(config, http);\r\n  }\r\n\r\n  /** Path part for operation `findAllBooks()` */\r\n  static readonly FindAllBooksPath = '/books';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `findAllBooks()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findAllBooks$Response(params?: FindAllBooks$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseBookResponse>> {\r\n    return findAllBooks(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `findAllBooks$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findAllBooks(params?: FindAllBooks$Params, context?: HttpContext): Observable<PageResponseBookResponse> {\r\n    return this.findAllBooks$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<PageResponseBookResponse>): PageResponseBookResponse => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `saveBook()` */\r\n  static readonly SaveBookPath = '/books';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `saveBook()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  saveBook$Response(params: SaveBook$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {\r\n    return saveBook(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `saveBook$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  saveBook(params: SaveBook$Params, context?: HttpContext): Observable<number> {\r\n    return this.saveBook$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<number>): number => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `uploadBookCoverPicture()` */\r\n  static readonly UploadBookCoverPicturePath = '/books/cover/{book-id}';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `uploadBookCoverPicture()` instead.\r\n   *\r\n   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.\r\n   */\r\n  uploadBookCoverPicture$Response(params: UploadBookCoverPicture$Params, context?: HttpContext): Observable<StrictHttpResponse<{\r\n}>> {\r\n    return uploadBookCoverPicture(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `uploadBookCoverPicture$Response()` instead.\r\n   *\r\n   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.\r\n   */\r\n  uploadBookCoverPicture(params: UploadBookCoverPicture$Params, context?: HttpContext): Observable<{\r\n}> {\r\n    return this.uploadBookCoverPicture$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<{\r\n}>): {\r\n} => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `borrowBook()` */\r\n  static readonly BorrowBookPath = '/books/borrow/{book-id}';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `borrowBook()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  borrowBook$Response(params: BorrowBook$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {\r\n    return borrowBook(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `borrowBook$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  borrowBook(params: BorrowBook$Params, context?: HttpContext): Observable<number> {\r\n    return this.borrowBook$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<number>): number => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `updateShareableStatus()` */\r\n  static readonly UpdateShareableStatusPath = '/books/shareable/{book-id}';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `updateShareableStatus()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  updateShareableStatus$Response(params: UpdateShareableStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {\r\n    return updateShareableStatus(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `updateShareableStatus$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  updateShareableStatus(params: UpdateShareableStatus$Params, context?: HttpContext): Observable<number> {\r\n    return this.updateShareableStatus$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<number>): number => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `returnBorrowBook()` */\r\n  static readonly ReturnBorrowBookPath = '/books/borrow/return/{book-id}';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `returnBorrowBook()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  returnBorrowBook$Response(params: ReturnBorrowBook$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {\r\n    return returnBorrowBook(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `returnBorrowBook$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  returnBorrowBook(params: ReturnBorrowBook$Params, context?: HttpContext): Observable<number> {\r\n    return this.returnBorrowBook$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<number>): number => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `approveReturnBorrowBook()` */\r\n  static readonly ApproveReturnBorrowBookPath = '/books/borrow/return/approve/{book-id}';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `approveReturnBorrowBook()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  approveReturnBorrowBook$Response(params: ApproveReturnBorrowBook$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {\r\n    return approveReturnBorrowBook(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `approveReturnBorrowBook$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  approveReturnBorrowBook(params: ApproveReturnBorrowBook$Params, context?: HttpContext): Observable<number> {\r\n    return this.approveReturnBorrowBook$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<number>): number => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `updateArchivedStatus()` */\r\n  static readonly UpdateArchivedStatusPath = '/books/archived/{book-id}';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `updateArchivedStatus()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  updateArchivedStatus$Response(params: UpdateArchivedStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {\r\n    return updateArchivedStatus(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `updateArchivedStatus$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  updateArchivedStatus(params: UpdateArchivedStatus$Params, context?: HttpContext): Observable<number> {\r\n    return this.updateArchivedStatus$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<number>): number => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `findBookById()` */\r\n  static readonly FindBookByIdPath = '/books/{book-id}';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `findBookById()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findBookById$Response(params: FindBookById$Params, context?: HttpContext): Observable<StrictHttpResponse<BookResponse>> {\r\n    return findBookById(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `findBookById$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findBookById(params: FindBookById$Params, context?: HttpContext): Observable<BookResponse> {\r\n    return this.findBookById$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<BookResponse>): BookResponse => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `findAllReturnedBooks()` */\r\n  static readonly FindAllReturnedBooksPath = '/books/returned';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `findAllReturnedBooks()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findAllReturnedBooks$Response(params?: FindAllReturnedBooks$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseBorrowedBookResponse>> {\r\n    return findAllReturnedBooks(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `findAllReturnedBooks$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findAllReturnedBooks(params?: FindAllReturnedBooks$Params, context?: HttpContext): Observable<PageResponseBorrowedBookResponse> {\r\n    return this.findAllReturnedBooks$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<PageResponseBorrowedBookResponse>): PageResponseBorrowedBookResponse => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `findAllBooksByOwner()` */\r\n  static readonly FindAllBooksByOwnerPath = '/books/owner';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `findAllBooksByOwner()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findAllBooksByOwner$Response(params?: FindAllBooksByOwner$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseBookResponse>> {\r\n    return findAllBooksByOwner(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `findAllBooksByOwner$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findAllBooksByOwner(params?: FindAllBooksByOwner$Params, context?: HttpContext): Observable<PageResponseBookResponse> {\r\n    return this.findAllBooksByOwner$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<PageResponseBookResponse>): PageResponseBookResponse => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `findAllBorrowedBooks()` */\r\n  static readonly FindAllBorrowedBooksPath = '/books/borrowed';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `findAllBorrowedBooks()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findAllBorrowedBooks$Response(params?: FindAllBorrowedBooks$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseBorrowedBookResponse>> {\r\n    return findAllBorrowedBooks(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `findAllBorrowedBooks$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findAllBorrowedBooks(params?: FindAllBorrowedBooks$Params, context?: HttpContext): Observable<PageResponseBorrowedBookResponse> {\r\n    return this.findAllBorrowedBooks$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<PageResponseBorrowedBookResponse>): PageResponseBorrowedBookResponse => r.body)\r\n    );\r\n  }\r\n\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}