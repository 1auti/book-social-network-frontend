{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { BaseService } from '../base-service';\nimport { findAllFeedbacksByBook } from '../fn/feedback/find-all-feedbacks-by-book';\nimport { saveFeedback } from '../fn/feedback/save-feedback';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api-configuration\";\nimport * as i2 from \"@angular/common/http\";\nexport class FeedbackService extends BaseService {\n  constructor(config, http) {\n    super(config, http);\n  }\n  /** Path part for operation `saveFeedback()` */\n  static #_ = this.SaveFeedbackPath = '/feedbacks';\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `saveFeedback()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  saveFeedback$Response(params, context) {\n    return saveFeedback(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `saveFeedback$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  saveFeedback(params, context) {\n    return this.saveFeedback$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `findAllFeedbacksByBook()` */\n  static #_2 = this.FindAllFeedbacksByBookPath = '/feedbacks/book/{book-id}';\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `findAllFeedbacksByBook()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findAllFeedbacksByBook$Response(params, context) {\n    return findAllFeedbacksByBook(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `findAllFeedbacksByBook$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findAllFeedbacksByBook(params, context) {\n    return this.findAllFeedbacksByBook$Response(params, context).pipe(map(r => r.body));\n  }\n  static #_3 = this.ɵfac = function FeedbackService_Factory(t) {\n    return new (t || FeedbackService)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n  };\n  static #_4 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FeedbackService,\n    factory: FeedbackService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["map","BaseService","findAllFeedbacksByBook","saveFeedback","FeedbackService","constructor","config","http","_","SaveFeedbackPath","saveFeedback$Response","params","context","rootUrl","pipe","r","body","_2","FindAllFeedbacksByBookPath","findAllFeedbacksByBook$Response","_3","i0","ɵɵinject","i1","ApiConfiguration","i2","HttpClient","_4","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Lautaro\\Desktop\\Desarrollo-web\\Proyectos\\book-social-network\\src\\app\\service\\service\\feedback.service.ts"],"sourcesContent":["/* tslint:disable */\r\n/* eslint-disable */\r\nimport { HttpClient, HttpContext } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { BaseService } from '../base-service';\r\nimport { ApiConfiguration } from '../api-configuration';\r\nimport { StrictHttpResponse } from '../strict-http-response';\r\n\r\nimport { findAllFeedbacksByBook } from '../fn/feedback/find-all-feedbacks-by-book';\r\nimport { FindAllFeedbacksByBook$Params } from '../fn/feedback/find-all-feedbacks-by-book';\r\nimport { PageResponseFeedbackResponse } from '../model/page-response-feedback-response';\r\nimport { saveFeedback } from '../fn/feedback/save-feedback';\r\nimport { SaveFeedback$Params } from '../fn/feedback/save-feedback';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class FeedbackService extends BaseService {\r\n  constructor(config: ApiConfiguration, http: HttpClient) {\r\n    super(config, http);\r\n  }\r\n\r\n  /** Path part for operation `saveFeedback()` */\r\n  static readonly SaveFeedbackPath = '/feedbacks';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `saveFeedback()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  saveFeedback$Response(params: SaveFeedback$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {\r\n    return saveFeedback(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `saveFeedback$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  saveFeedback(params: SaveFeedback$Params, context?: HttpContext): Observable<number> {\r\n    return this.saveFeedback$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<number>): number => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `findAllFeedbacksByBook()` */\r\n  static readonly FindAllFeedbacksByBookPath = '/feedbacks/book/{book-id}';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `findAllFeedbacksByBook()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findAllFeedbacksByBook$Response(params: FindAllFeedbacksByBook$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseFeedbackResponse>> {\r\n    return findAllFeedbacksByBook(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `findAllFeedbacksByBook$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findAllFeedbacksByBook(params: FindAllFeedbacksByBook$Params, context?: HttpContext): Observable<PageResponseFeedbackResponse> {\r\n    return this.findAllFeedbacksByBook$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<PageResponseFeedbackResponse>): PageResponseFeedbackResponse => r.body)\r\n    );\r\n  }\r\n\r\n}"],"mappings":"AAKA,SAASA,GAAG,QAAQ,gBAAgB;AAEpC,SAASC,WAAW,QAAQ,iBAAiB;AAI7C,SAASC,sBAAsB,QAAQ,2CAA2C;AAGlF,SAASC,YAAY,QAAQ,8BAA8B;;;;AAI3D,OAAM,MAAOC,eAAgB,SAAQH,WAAW;EAC9CI,YAAYC,MAAwB,EAAEC,IAAgB;IACpD,KAAK,CAACD,MAAM,EAAEC,IAAI,CAAC;EACrB;EAEA;EAAA,QAAAC,CAAA,GACgB,KAAAC,gBAAgB,GAAG,YAAY;EAE/C;;;;;;EAMAC,qBAAqBA,CAACC,MAA2B,EAAEC,OAAqB;IACtE,OAAOT,YAAY,CAAC,IAAI,CAACI,IAAI,EAAE,IAAI,CAACM,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EAC/D;EAEA;;;;;;EAMAT,YAAYA,CAACQ,MAA2B,EAAEC,OAAqB;IAC7D,OAAO,IAAI,CAACF,qBAAqB,CAACC,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CACrDd,GAAG,CAAEe,CAA6B,IAAaA,CAAC,CAACC,IAAI,CAAC,CACvD;EACH;EAEA;EAAA,QAAAC,EAAA,GACgB,KAAAC,0BAA0B,GAAG,2BAA2B;EAExE;;;;;;EAMAC,+BAA+BA,CAACR,MAAqC,EAAEC,OAAqB;IAC1F,OAAOV,sBAAsB,CAAC,IAAI,CAACK,IAAI,EAAE,IAAI,CAACM,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EACzE;EAEA;;;;;;EAMAV,sBAAsBA,CAACS,MAAqC,EAAEC,OAAqB;IACjF,OAAO,IAAI,CAACO,+BAA+B,CAACR,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CAC/Dd,GAAG,CAAEe,CAAmD,IAAmCA,CAAC,CAACC,IAAI,CAAC,CACnG;EACH;EAAC,QAAAI,EAAA,G;qBArDUhB,eAAe,EAAAiB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,gBAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAfvB,eAAe;IAAAwB,OAAA,EAAfxB,eAAe,CAAAyB,IAAA;IAAAC,UAAA,EADF;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}